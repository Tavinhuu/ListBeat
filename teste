import SwiftUI

struct ContentView: View {
    @State private var nome: String = ""
    @State private var artista: String = ""
    @State private var genero: String = ""
    @State private var ano: String = ""
    @State private var avaliacao: Int = 0
    @State private var comentario: String = ""

    var body: some View {
        VStack {
            TextField("Nome da Música", text: $nome)
                .padding()
                .textFieldStyle(RoundedBorderTextFieldStyle())

            TextField("Artista", text: $artista)
                .padding()
                .textFieldStyle(RoundedBorderTextFieldStyle())

            TextField("Gênero", text: $genero)
                .padding()
                .textFieldStyle(RoundedBorderTextFieldStyle())

            TextField("Ano", text: $ano)
                .keyboardType(.numberPad)
                .padding()
                .textFieldStyle(RoundedBorderTextFieldStyle())

            Stepper("Avaliação: \(avaliacao)", value: $avaliacao, in: 0...5)
                .padding()

            TextField("Comentário", text: $comentario)
                .padding()
                .textFieldStyle(RoundedBorderTextFieldStyle())

            Button(action: {
                // Quando o usuário clicar no botão, enviar os dados
                submitMusic()
            }) {
                Text("Adicionar Música")
                    .padding()
                    .background(Color.blue)
                    .foregroundColor(.white)
                    .cornerRadius(10)
            }
        }
        .padding()
    }

    func submitMusic() {
        // Aqui você coleta os dados e prepara o dicionário para enviar
        let musicData: [String: Any] = [
            "nome": nome,
            "artista": artista,
            "genero": genero,
            "ano": ano,
            "avaliacao": avaliacao,
            "comentario": comentario
        ]
        
        // Enviar para o Node-RED via HTTP POST
        sendToNodeRed(musicData: musicData)
    }

    func sendToNodeRed(musicData: [String: Any]) {
        guard let url = URL(string: "http://192.168.128.90:1880/enviarUCB") else {
            print("URL inválida")
            return
        }

        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        
        // Converte o dicionário para JSON
        if let jsonData = try? JSONSerialization.data(withJSONObject: musicData, options: .prettyPrinted) {
            request.httpBody = jsonData
            
            // Faz a requisição HTTP
            let task = URLSession.shared.dataTask(with: request) { (data, response, error) in
                if let error = error {
                    print("Erro: \(error)")
                    return
                }
                
                // Aqui você pode processar a resposta, se necessário
                if let data = data, let responseString = String(data: data, encoding: .utf8) {
                    print("Resposta do Node-RED: \(responseString)")
                }
            }
            task.resume()
        }
    }
}

// Preview atualizado com ContentView
#Preview {
    ContentView()
}
